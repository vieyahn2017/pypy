被 tornado.web.asynchronous 装饰之后，命中这个方法的 HTTP 请求就成为长连接，直到你调用 self.finish 发送响应之前，连接都在等待状态。如果直到某个事件出发（比如有信息更新）才调用 self.finish 则这个连接会一直等待到该事件触发。


dragonflylxp python后端，3年从业经验
tornado已经通过IO多路复用(multiplexing)实现了请求层面的IO异步，那么服务端在收到请求之后，发送响应之前的具体业务代码里，如何进一步提高性能呢：
(1).tornado.web.asynchronous装饰器给开发人员提供了将业务代码异步化的机会。IOLoop会在任何存在阻塞的时候将线程的执行切换到其他没有阻塞的业务中。 前提是这些阻塞点必须是IOLoop能识别的， 比如用ioloop自带的add_timeout方法设置了一个延迟5秒的回调，或者兼容ioloop的第三方驱动(AsyncHTTPClient/torando-redis等等)，因为他们都依赖IOLoop的统一调度。【注意：用此装饰器，要求开发者显示地调用self.finish()来结束请求】
(2).tornado.gen.coroutine装饰器通常与 @web.asynchronous结合使用，把异步的方式由之前采用回调的方式包装成协程的写法，而且不用再显示地调用self.finish()。【福利：Since Tornado 3.1, the combination of @asynchronousand @gen.coroutine has been unnecessary and discouraged; in most cases you should s@gen.coroutine alone.】







最近一直在研究Tornado异步操作，然而一番研究后发现要使一个函数异步化的最好方法就是采用相关异步库，但目前很多功能强大的库都不在此列。经过一番查找文档和搜索示范，终于发现了ThreadPoolExecutor模块和run_on_executor装饰器。用法就是建立线程池，用run_on_executor装饰的函数即运行在其中线程中，从而从主线程中分离出来，达到异步的目的。
另外，Tornado的IOLoop实例还有IOLoop.add_callback(callback, *args, **kwargs)方法，文档中的描述如下：

Calls the given callback on the next I/O loop iteration.
It is safe to call this method from any thread at any time, except from a signal handler. Note that this is the only method in IOLoop that makes this thread-safety guarantee; all other interaction with theIOLoop must be done from that IOLoop ‘s thread. add_callback() may be used to transfer control from other threads to the IOLoop ‘s thread.
意思就是在执行add_callback方法后马上就会执行下一行代码，而callback函数将在下一轮事件循环中才调用，从而就能实现延迟任务。在Web APP中应付HTTP请求时，当有一些耗时操作并不需要返回给请求方时，就可以采用延迟任务的形式，比如发送提醒邮件。



self.finish()

当一个处理请求的行为被执行之后，这个请求会自动地结束。因为 Tornado 当中使用了 一种非阻塞式的 I/O 模型，所以你可以改变这种默认的处理行为――让一个请求一直保持 连接状态，而不是马上返回，直到一个主处理行为返回。要实现这种处理方式，只需要 使用 tornado.web.asynchronous 装饰器就可以了。

 
使用了这个装饰器之后，你必须调用 self.finish() 已完成 HTTTP 请求，否则 用户的浏览器会一直处于等待服务器响应的状态。

下面（参考http://simple-is-better.com/news/627）：

@安江泽
    self.finish()代表回应生成的终结，并不代表着请求处理逻辑的终结。假设你有一个block的逻辑是和回应无关的，那么放在self.finish()的后面可以显著的缩短响应时间。所以，如果你确定自己的逻辑需要立即返回，可以在self.finish()后立刻return。Tornado在将这个自由留给了你自己。

另外一个理由是，在call stack里让顶端的函数去弹出一个非顶端的函数，这个逻辑有点奇怪。唯一能够提供退出的机制就是异常了。但是在正常逻辑里面使用异常去实现一个功能，也是很怪的逻辑。